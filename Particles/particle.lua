-- generalized particle system
-- particle properties:
  -- 1. position
  -- 2. velocity
  -- 4. size
  -- 5. color
  -- 6. lifetime
  -- 7. age
-- particles are generated by a particle generator
  -- this generator can be any object, including other particles
  -- particle inherits position and velocity from generator

-- particle must delete itself when it's lifetime is up

require("Units.Unit")

Particle = {}
Particle.__index = Particle

function Particle:new( _x, _y, _size, _rotation, _speed, _lifetime, _color )
  local particle = {
    ["x"]        = _x,
    ["y"]        = _y,
    ["size"]     = _size,
    ["rotation"] = _rotation,
    ["speed"]    = top_speed,
    ["lifetime"] = _lifetime,
    ["age"]      = 0,
    ["color"]    = _color
  }

  setmetatable(particle, self)

  return particle
end

function Particle:update( dt )
  self.x = self.x + math.cos( self.rotation ) * dt * self.speed
  self.y = self.y + math.sin( self.rotation ) * dt * self.speed
end

function Particle:isDead()
  return self.age >= self.lifetime
end

function Particle:delete()
  self = nil
end

function Particle:draw()
  love.graphics.setColor( unpack(self.color) )
  love.graphics.circle( "fill", self.x, self.y, self.size, 50 )
end

ParticleGenerator = {}
ParticleGenerator.__index = ParticleGenerator

function ParticleGenerator:new( _parent, _interval )
  local generator = {
    ["parent"] = _parent,
    ["particles"] = {},
    ["timer"] = 0,
    ["interval"] = _interval
  }

  setmetatable(generator, self)

  return generator
end

function ParticleGenerator:update( dt )
  self.timer = self.timer + dt
  if self.timer >= self.interval then
    self.timer = 0
    self:add( 100, { 0, 1, 0 } )
  end
  for i = #self.particles, 1, -1 do
    local particle = self.particles[i]
    particle:update( dt )
    if particle.age >= particle.lifetime then
      self.particles[i]:delete()
      table.remove( self.particles, i )
    end
  end
end

function ParticleGenerator:draw()
  for _, particle in pairs( self.particles ) do
    particle:draw()
  end
end

function ParticleGenerator:add( _lifetime, _color )
  local particle = Particle:new(
    self.parent.x,
    self.parent.y,
    self.parent.size,
    self.parent.rotation,
    self.parent.speed,
    _lifetime or 1000,
    _color
  )
  table.insert( ParticleGenerator.particles, particle )
  return particle
end
